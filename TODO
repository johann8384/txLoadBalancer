Roadmap
=======

Placeholders
------------
 * look at iterating over service collections from inside the host checker
 * look at stopping and starting services from inside checker functions

Version 1.1.0
-------------
 * Fill in all docstrings (at the very least, for classes and module-level
   functions)
 * replace ad-hoc bad host checking with iteration over twisted services
 * remove director.listeners list weirdness (there's one proxy per service, so
   why's there a list?) (config.ServiceConfig.listen = [] --> = '')
 * eliminate old methods (such as AdminUserConfig.checkAccess) that were part
   of the old API
 * add weighted host scheduler (use code from when I was at PBS)
 * add a configuration checker and write out the new ones to disk
   . back up the old ones
   . disable by default; add configuration option in manager
 * convert the reactor calls for the Receivers and Senders to use t.i.app
   instead (if possible)
   . this might make connections easier to manage
   . should give better logging/tracking of requests


Version 1.2.0
-------------
 * add a scheduler that accounts for memory and CPU utilization, which will
   require:
   . a standard python means for services to get system memory and other
     resource utilization stats
   . a means for services to report this to the ProxyManager
   . an algorigthm (or series of them) for determining the suitablity of a
     service to receive the next request based on a total evalution of current
     reported resource utilization
 * I don't like the default behaviour of adding bad hosts back into circulation
   without any checks; I want to add something there...
   . store away more info about the down hosts
   . when, how long til next test, etc.
   . track the count of faults.
 * sort service groups in admin UI by name
 * cache DNS lookups
 * start adding unit tests


Version 1.3.0
-------------
 * add heartbeat/HA features for lb'ed services to communicate back up to the
   lb manager
 * add an XML-RPC service instead of the custom web API
   . including adding methods for bouncing the admin UI
 * replace old PyDirector logging with Twisted logging
 * figure out a way to restart/upgrade pydir. Idea: close down listener, start
   new code immediately
   . let old connections on old pydir finish (run to completion) before exiting
   . look at (again) JP's live process migration work from several years ago
 * add diffs for examining running/stored configurations
 * move CSS into a static file
 * continue adding unit tests


Version 1.4.0
-------------
 * [maybe] make the "top" link point to a list of service groups, linked to
   pages that just display that one section (as opposed to the view that
   "running" gives, which is all sections)
 * examine the benefits of schedulers having write control over host data
 * examine breaking out listeners and managers across different processes/hosts
   . if a Twisted service is to be loadbalanced how should that happen?
   . if we are running a manger daemon for twisted services that are configured
     to be loadbalanced, how should that happen?
   . what about all of the services potentially being equal? any can be a
     manager, any can be balanced via another services proxy manager
 * sticky connections. keep a cache of 'client_ip':'backend_ip'
   . manager needs to be able to call "scheduler.cleanup()" to allow the
     cache to be manageable.
 * continue adding unit tests


Version 1.5.0
-------------
 * convert the user auth to use cred
 * complete unit tests


Version 2.0.0
-------------
 * the AMP-based "bottle" protocol
 * messaging, process control
 * cluster management
 * add additional authentication support
   . LDAP
   . RADIUS
 * connection count scheduler
  . could be used to track licensing of a service, or limit it

